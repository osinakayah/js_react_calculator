{"version":3,"sources":["components/Display/Display.js","components/Button/Button.js","components/ButtonPanel/ButtonPanel.js","logic/calculate.js","logic/operate.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Display","props","react_default","a","createElement","className","result","Button","onClick","handleClick","name","style","backgroundColor","color","width","wide","ButtonPanel","components_Button_Button","clickHandler","calculate","calculator","buttonName","total","next","operation","numberOne","numberTwo","numberOneBig","BigJs","parseFloat","numberTwoBig","div","valueOf","times","minus","plus","e","message","substring","operate","isNaN","App","state","_this","setState","prevState","_renderValueToDisplay","_this$state$calculato","toString","components_Display_Display","this","components_ButtonPanel_ButtonPanel","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.feb0e094.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Display.css'\n\nconst Display = props =>\n    (<div className={'Display'}>\n        <h2 className={'Result'}>{props.result}</h2>\n    </div>)\n\nDisplay.propTypes = {\n    result: PropTypes.string.isRequired,\n}\n\nexport default Display\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './Button.css'\n\nconst Button = props => (\n    <div onClick={() => props.handleClick(props.name)} className={'Button'}\n         style={{backgroundColor: props.color || '#e89353', width: props.wide ? '48%' : '24%'}}>\n        {props.name}\n    </div>\n)\n\nButton.propTypes = {\n    name: PropTypes.string.isRequired,\n    color: PropTypes.string,\n    wide: PropTypes.bool,\n    handleClick: PropTypes.func\n}\n\nexport default Button;\n","import React from 'react';\nimport './ButtonPanel.css'\nimport Button from \"../Button/Button\";\nimport PropTypes from \"prop-types\";\n\nconst ButtonPanel = props => (\n    <div className={'ButtonPanel'}>\n        <div>\n            <Button handleClick={props.clickHandler} name={'AC'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'+/-'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'%'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'/'}/>\n        </div>\n        <div>\n            <Button handleClick={props.clickHandler} name={'7'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'8'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'9'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'X'}/>\n        </div>\n        <div>\n            <Button handleClick={props.clickHandler} name={'4'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'5'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'6'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'-'}/>\n        </div>\n        <div>\n            <Button handleClick={props.clickHandler} name={'1'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'2'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'3'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'+'}/>\n        </div>\n\n        <div>\n            <Button handleClick={props.clickHandler} name={'0'} color={'#e0e0e0'} wide/>\n            <Button handleClick={props.clickHandler} name={'.'} color={'#e0e0e0'}/>\n            <Button handleClick={props.clickHandler} name={'='}/>\n        </div>\n\n    </div>\n)\n\nButtonPanel.propTypes = {\n    clickHandler: PropTypes.func,\n}\n\n\nexport default ButtonPanel\n","import operate from './operate'\n\nexport function calculate(calculator, buttonName) {\n    switch (buttonName) {\n        case 'AC':\n            calculator.total = null;\n            calculator.next = null;\n            calculator.operation = null\n            break;\n        case '+/-':\n            calculator.total = calculator.total * -1\n            break;\n        case '/':\n            calculator.operation = '/'\n            calculator.total = calculator.next;\n            calculator.next = \"\"\n            break;\n        case 'X':\n            calculator.operation = 'X'\n            calculator.total = calculator.next;\n            calculator.next = \"\"\n            break\n        case '-':\n            calculator.operation = '-'\n            calculator.total = calculator.next;\n            calculator.next = \"\"\n            break\n        case '+':\n            calculator.operation = '+'\n            calculator.total = calculator.next;\n            calculator.next = \"\"\n            break\n        case '=':\n            calculator.total = operate(calculator.total, calculator.next, calculator.operation);\n            calculator.next = \"\"\n            calculator.operation = '='\n            break;\n        default:\n            if (isNaN(calculator.total)) {\n                calculator.total = null;\n            }\n\n            calculator.next === null ? calculator.next = buttonName : calculator.next = calculator.next + buttonName\n    }\n    return calculator;\n}\n","import BigJs from 'big.js'\n\nexport default function operate(numberOne, numberTwo, operation) {\n  try {\n    const numberOneBig = BigJs(parseFloat(numberOne))\n    const numberTwoBig = BigJs(parseFloat(numberTwo))\n\n    switch (operation) {\n      case '/':\n        return numberOneBig.div(numberTwoBig).valueOf()\n      case 'X':\n        return numberOneBig.times(numberTwoBig).valueOf()\n      case '-':\n        return numberOneBig.minus(numberTwoBig).valueOf()\n      case '+':\n        return numberOneBig.plus(numberTwoBig).valueOf()\n      default:\n        return new BigJs(0).valueOf();\n\n    }\n  }\n  catch (e) {\n    return e.message.substring(8);\n  }\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport Display from \"../Display/Display\";\nimport ButtonPanel from \"../ButtonPanel/ButtonPanel\";\nimport {calculate} from \"../../logic/calculate\";\n\nclass App extends Component {\n    state = {\n        calculator: {\n            total: null,\n            next: null,\n            operation: null\n        }\n    };\n\n    handleClick = (buttonName) => {\n        this.setState(prevState => calculate(prevState.calculator, buttonName))\n    }\n    _renderValueToDisplay = () => {\n        const {total, next, operation} = this.state.calculator;\n\n        if (operation === '=' && total) {\n            return total.toString();\n        }\n        return next ? next.toString() : \"\"\n    }\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <Display result={this._renderValueToDisplay()}/>\n                <ButtonPanel clickHandler={this.handleClick}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}